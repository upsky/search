---------------------
TODO:
 - по спец.запросу к веб-серверу отдавать список (иерархию) категорий
 - вероятностная классификация - вектор категорий, или хотя бы вероятность по той, которую задетектили.
 - заюзать нормальную морфологию + с учётом соседних слов, https://github.com/kmike/pymorphy2
 - попробовать символьные н-граммы;
 - попробовать заюзать что-нибудь другое, кроме bag-of-words;
 - try TF-IDF for categories instead of dox;
 - отделить обучалку/тестилку от предиктора, причесать сервер;
 - grid-search, составить таблицу: F1 - algo - algo params;
 - play around the 'analyzer' and 'token normalization' under CountVectorizer;
 - TruncatedSVD, latent semantic analysis???

---------------------
Параметры поиска:
 - услуга (специализация, категория)
 - цена
 - место: город, метро, улица, район
 - время (срочно, утром, днём, вечером, сегодня, завтра, на этой неделе, в этом месяце, в следующем...);
 - способ предоставления услуги: у спеца, у меня (на дому, дома, домой), он-лайн, по скайпу, по телефону, удалённо
 - флаг: записаться онлайн
 - флаг: только с [положительными|хорошими] отзывами
 - пол спеца: мужчина/женщина
 - флаг: недорого, дёшево, дорого, люкс
 - флаг: под ключ;

Признаки:
 - что сделать: починить колесо, вылечить насморк;
 - симптом: сдулось колесо, болит голова, головная боль, насморк;
 - специализация: хорошего врача, врача на дом, сантехник;

Структура:
 - нормализатор (е-ё, lower-case)
 - опечаточник - отдельная задача;
 - морфологический нормализатор - для начала просто стеммер;
 - классификатор (скорее всего несколько классификаторов, каждый вытаскивает свой признак);

---------------------


---------------------
Акинатор - http://ru.akinator.com/:
    - можно построить прикольную игровую штуку, которая будет "угадывать" то, что хочет пользователь.
    - таким-то образом можно на самом деле вытаскивать из реальных пользователей онтологию того, как и из чего состоят их потребности.
    - продумать бы каким образом задавать пользователю так, чтобы убеждаться не только в правильности готовых вопросов, но и простимулировать их к формированию новых, если их в системе пока нет.

